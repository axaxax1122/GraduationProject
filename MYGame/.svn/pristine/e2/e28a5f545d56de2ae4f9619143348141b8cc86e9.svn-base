#include "Player.h"
#include "Component/Dx11Transform.h"
#include "GameObject/Dx11GameObject.h"
#include "Scene/Dx11Layer.h"
#include "Core/Dx11Input.h"

CPlayer::CPlayer()
{
}

CPlayer::~CPlayer()
{
}

bool CPlayer::Init()
{
	DX11_GET_SINGLE(CDx11Input)->CreateKey("RotYFront", 'E');
	DX11_GET_SINGLE(CDx11Input)->CreateKey("RotYBack", 'Q');
	DX11_GET_SINGLE(CDx11Input)->CreateKey("RotXFront", 'R');
	DX11_GET_SINGLE(CDx11Input)->CreateKey("RotXBack", 'F');
	DX11_GET_SINGLE(CDx11Input)->CreateKey("Skill2", '2');

	m_fSolWSpeed = 2.f;
	m_fSolWLimit = 2.f;
	m_fSolWAcc = 0.f;
	m_bSolWEnable = false;
	m_fFireTime = 0.f;
	m_bFire = false;

	return true;
}

void CPlayer::Input(float fTime)
{
	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("RotZBack") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("RotZBack"))
	{
		m_pTransform->RotationWorld(DX11_PI, fTime, AXIS_Z);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("RotZFront") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("RotZFront"))
	{
		m_pTransform->RotationWorld(-DX11_PI, fTime, AXIS_Z);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("RotXBack") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("RotXBack"))
	{
		m_pTransform->RotationWorld(DX11_PI, fTime, AXIS_X);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("RotXFront") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("RotXFront"))
	{
		m_pTransform->RotationWorld(-DX11_PI, fTime, AXIS_X);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("RotYBack") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("RotYBack"))
	{
		m_pTransform->RotationWorld(DX11_PI, fTime, AXIS_Y);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("RotYFront") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("RotYFront"))
	{
		m_pTransform->RotationWorld(-DX11_PI, fTime, AXIS_Y);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("MoveFront") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("MoveFront"))
	{
		m_pTransform->MoveWorld(5.f, fTime, AXIS_Y);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("MoveBack") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("MoveBack"))
	{
		m_pTransform->MoveWorld(-5.f, fTime, AXIS_Y);
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("Fire") ||
		DX11_GET_SINGLE(CDx11Input)->KeyPush("Fire"))
	{
		if (!m_bFire)
		{
			Fire();
			m_bFire = true;
		}
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("Skill1"))
	{
		m_bSolWEnable = true;
		//SolW(fTime);
		//Fire();
	}

	if (DX11_GET_SINGLE(CDx11Input)->KeyDown("Skill2"))
	{
		//m_bSolWEnable = true;
		Skill2();
		//SolW(fTime);
		//Fire();
	}
}

int CPlayer::Update(float fTime)
{
	if (m_bSolWEnable)
	{
		SolW(fTime);
	}

	if (m_bFire)
	{
		m_fFireTime += fTime;

		if (m_fFireTime >= 0.1f)
		{
			m_bFire = false;
			m_fFireTime = 0.f;
		}
	}

	return 0;
}

int CPlayer::LateUpdate(float fTime)
{
	return 0;
}

void CPlayer::Render(float fTime)
{
}

CPlayer * CPlayer::Clone()
{
	return new CPlayer(*this);
}

void CPlayer::Fire()
{
	CDx11GameObject*	pBullet = CreateBullet(m_pTransform);
	SAFE_RELEASE(pBullet);

	// 자식 비행기 2명의 Transform을 얻어온다.
	CDx11GameObject*	pChild = m_pGameObject->FindChildFromTag("LeftChild");
	CDx11Transform*	pChildTr = pChild->GetTransform();
	pBullet = CreateBullet(pChildTr);
	SAFE_RELEASE(pBullet);
	SAFE_RELEASE(pChildTr);
	SAFE_RELEASE(pChild);
	
	pChild = m_pGameObject->FindChildFromTag("RightChild");
	pChildTr = pChild->GetTransform();
	pBullet = CreateBullet(pChildTr);
	SAFE_RELEASE(pBullet);
	SAFE_RELEASE(pChildTr);
	SAFE_RELEASE(pChild);
}

void CPlayer::SolW(float fTime)
{
	CDx11GameObject*	pChild = m_pGameObject->FindChildFromTag("LeftChild");
	CDx11Transform*	pChildTr = pChild->GetTransform();

	CDx11GameObject*	pRChild = m_pGameObject->FindChildFromTag("RightChild");
	CDx11Transform*	pRChildTr = pRChild->GetTransform();

	float	fSpeed = m_fSolWSpeed * fTime;
	m_fSolWAcc += fSpeed;

	//_cprintf("Acc : %.5f\n", m_fSolWAcc);

	Vec3	vMove(-fSpeed, 0.f, 0.f);
	Vec3	vMove1(fSpeed, 0.f, 0.f);

	if (m_fSolWAcc >= m_fSolWLimit)
	{
		m_bSolWEnable = false;
		vMove.x -= (m_fSolWAcc - m_fSolWLimit);
		vMove1.x += (m_fSolWAcc - m_fSolWLimit);
		m_fSolWAcc = 0.f;
	}
	
	pChildTr->MoveWorld(vMove);
	pRChildTr->MoveWorld(vMove1);

	SAFE_RELEASE(pChildTr);
	SAFE_RELEASE(pChild);

	SAFE_RELEASE(pRChildTr);
	SAFE_RELEASE(pRChild);
}

void CPlayer::Skill2()
{
	CDx11GameObject*	pSkill2 = CDx11GameObject::Create("Skill2Prototype",
		OT_CLONE);

	CDx11Transform*	pBulletTr = pSkill2->GetTransform();

	pBulletTr->Copy(m_pTransform);
	pBulletTr->MoveWorld(0.75f, 1.f, AXIS_Y);
	pBulletTr->SetWorldScale(0.5f, 0.5f, 0.5f);
	pBulletTr->SetWorldView(m_pTransform->GetWorldAxis(AXIS_Y));
	//pBulletTr->MoveWorld(0.f, 0.5f, AXIS_Y);

	SAFE_RELEASE(pBulletTr);

	m_pLayer->AddObject(pSkill2);

	SAFE_RELEASE(pSkill2);
}

CDx11GameObject * CPlayer::CreateBullet(CDx11Transform * pTransform)
{
	CDx11GameObject*	pBullet = CDx11GameObject::Create("BulletPrototype",
		OT_CLONE);

	CDx11Transform*	pBulletTr = pBullet->GetTransform();

	pBulletTr->Copy(pTransform);
	pBulletTr->MoveWorld(0.75f, 1.f, AXIS_Y);
	pBulletTr->SetWorldScale(0.5f, 0.5f, 0.5f);
	pBulletTr->SetWorldView(pTransform->GetWorldAxis(AXIS_Y));
	//pBulletTr->MoveWorld(0.f, 0.5f, AXIS_Y);

	SAFE_RELEASE(pBulletTr);

	m_pLayer->AddObject(pBullet);
	
	return pBullet;
}
