#include "MainScene.h"
#include "GameObject/Dx11GameObject.h"
#include "Component/Dx11Transform.h"
#include "Component/Dx11Renderer.h"
#include "Scene/Dx11Scene.h"
#include "Scene/Dx11Layer.h"
#include "../ObjectScript/Player.h"
#include "../ObjectScript/Bullet.h"
#include "../ObjectScript/Monster.h"
#include "Core/Dx11Scheduler.h"
#include "Resources/Dx11ResourcesManager.h"
#include "Resources/Dx11Texture.h"
#include "Component/Dx11Material.h"
#include "../ObjectScript/Skill2.h"
#include "Component/Dx11ColliderSphere.h"

CMainScene::CMainScene()
{
}

CMainScene::~CMainScene()
{
}

bool CMainScene::Init()
{
	CDx11Layer*	pLayer = m_pScene->FindLayer("DefaultLayer");

	if (!pLayer)
		return false;

	// 샘플 텍스쳐 로딩
	CDx11Texture*	pTex = DX11_GET_SINGLE(CDx11ResourcesManager)->LoadTexture(
		"HYS", L"HYS.jpg");

	SAFE_RELEASE(pTex);

	// 환경맵 설정
	m_pScene->CreateSky("SkyTex", L"DesertSky.dds");

	CDx11GameObject*	pPlayer = CDx11GameObject::Create("PlayerObject");

	// 렌더러를 생성한다.
	CDx11Renderer*	pRenderer = pPlayer->AddComponent<CDx11Renderer>("PlayerRenderer");

	pRenderer->SetMesh(RECT_TEX_MESH);
	pRenderer->SetShader(DEFAULT_TEX_SHADER);

	// 재질을 설정한다.
	pRenderer->CreateMaterial("HYS", DEFAULT_SAMPLER);

	SAFE_RELEASE(pRenderer);

	CDx11ColliderSphere*	pSphere = pPlayer->AddComponent<CDx11ColliderSphere>("PlayerColl");

	pSphere->SetInfo(Vec3Zero, 0.8f);

	SAFE_RELEASE(pSphere);

	CPlayer*	pPlayerScript = pPlayer->AddComponent<CPlayer>("Player");

	SAFE_RELEASE(pPlayerScript);

	CDx11GameObject*	pPlayerChild = CDx11GameObject::Create("LeftChild");

	// 렌더러를 생성한다.
	pRenderer = pPlayerChild->AddComponent<CDx11Renderer>("PlayerChildRenderer");

	pRenderer->SetMesh(RECT_TEX_MESH);
	pRenderer->SetShader(DEFAULT_TEX_SHADER);

	// 재질을 설정한다.
	pRenderer->CreateMaterial("ChildPlayer", L"Child.png");
	
	// Alpha Blend
	pRenderer->SetRenderState(DX11_RS_ALPHABLEND);

	SAFE_RELEASE(pRenderer);

	CDx11Transform*	pChildTr = pPlayerChild->GetTransform();
	pChildTr->MoveWorld(-1.f, 1.f, AXIS_X);
	pChildTr->SetWorldScale(0.5f, 0.5f, 1.f);

	//pChildTr->DeleteParentFlag(TPF_POS);

	SAFE_RELEASE(pChildTr);

	pPlayer->AddChild(pPlayerChild);
	SAFE_RELEASE(pPlayerChild);

	pPlayerChild = CDx11GameObject::Create("RightChild");

	// 렌더러를 생성한다.
	pRenderer = pPlayerChild->AddComponent<CDx11Renderer>("PlayerChildRenderer");

	pRenderer->SetMesh(RECT_TEX_MESH);
	pRenderer->SetShader(DEFAULT_TEX_SHADER);

	// 재질을 설정한다.
	pRenderer->CreateMaterial("ChildPlayer", L"Child.png");

	// Alpha Blend
	pRenderer->SetRenderState(DX11_RS_ALPHABLEND);

	SAFE_RELEASE(pRenderer);

	pChildTr = pPlayerChild->GetTransform();
	pChildTr->MoveWorld(1.f, 1.f, AXIS_X);
	pChildTr->SetWorldScale(0.5f, 0.5f, 1.f);

	SAFE_RELEASE(pChildTr);

	pPlayer->AddChild(pPlayerChild);
	SAFE_RELEASE(pPlayerChild);

	pLayer->AddObject(pPlayer);

	SAFE_RELEASE(pPlayer);

	// 총알 프로토타입을 만든다.
	CDx11GameObject*	pBullet = CDx11GameObject::Create("BulletPrototype", OT_PROTOTYPE);

	// 렌더러를 생성한다.
	pRenderer = pBullet->AddComponent<CDx11Renderer>("BulletRenderer");

	pRenderer->SetMesh(TRIANGLE_MESH);
	pRenderer->SetShader(DEFAULT_SHADER);

	SAFE_RELEASE(pRenderer);

	pSphere = pBullet->AddComponent<CDx11ColliderSphere>("BulletColl");

	pSphere->SetInfo(Vec3Zero, 0.8f);

	SAFE_RELEASE(pSphere);

	CBullet*	pBulletSc = (CBullet*)pBullet->AddComponent<CBullet>("BulletScript");

	SAFE_RELEASE(pBulletSc);

	// 스킬2번 총알 프로토타입 생성
	CDx11GameObject* pSkill2 = CDx11GameObject::Create("Skill2Prototype", OT_PROTOTYPE);

	CSkill2*	pSkill2Sc = pSkill2->AddComponent<CSkill2>();

	SAFE_RELEASE(pSkill2Sc);

	CDx11GameObject*	pSkill2Child = CDx11GameObject::Create("Skill2Child",
		OT_NORMAL);

	pChildTr = pSkill2Child->GetTransform();

	pChildTr->SetWorldPos(-2.f, 0.f, 0.f);

	SAFE_RELEASE(pChildTr);

	pSkill2->AddChild(pSkill2Child);

	// 렌더러를 생성한다.
	pRenderer = pSkill2Child->AddComponent<CDx11Renderer>("Skill2Renderer");

	pRenderer->SetMesh(TRIANGLE_MESH);
	pRenderer->SetShader(DEFAULT_SHADER);

	SAFE_RELEASE(pRenderer);

	SAFE_RELEASE(pSkill2Child);

	// 몬스터 프로토타입을 만든다.
	CDx11GameObject*	pMonster = CDx11GameObject::Create("MonsterPrototype", OT_PROTOTYPE);

	// 렌더러를 생성한다.
	pRenderer = pMonster->AddComponent<CDx11Renderer>("MonsterRenderer");

	pRenderer->SetMesh(TRIANGLE_MESH);
	pRenderer->SetShader(DEFAULT_SHADER);

	SAFE_RELEASE(pRenderer);

	pSphere = pMonster->AddComponent<CDx11ColliderSphere>("MonsterColl");

	pSphere->SetInfo(Vec3Zero, 0.8f);

	SAFE_RELEASE(pSphere);

	CMonster*	pMonsterSc = (CMonster*)pMonster->AddComponent<CMonster>("MonsterScript");

	SAFE_RELEASE(pMonsterSc);

	SAFE_RELEASE(pLayer);

	CDx11GameObject*	pCameraObj = m_pScene->CreateCamera("SubCamera1",
		DX11_PI / 3.f, 0.1f, 1000.f);

	CDx11Transform*	pCamTr = pCameraObj->GetTransform();

	pCamTr->SetWorldPos(5.f, 0.f, -10.f);
	pCamTr->SetWorldRot(0.f, -DX11_PI / 4.f, DX11_PI / 6.f);

	SAFE_RELEASE(pCamTr);

	SAFE_RELEASE(pCameraObj);

	DX11_GET_SINGLE(CDx11Scheduler)->CreateSchedule(this, &CMainScene::CreateMonster,
		3.f, SO_LOOP);

	return true;
}

void CMainScene::Input(float fTime)
{
}

int CMainScene::Update(float fTime)
{
	static string	str = "SubCamera1";
	static bool		bReturn;

	if (GetAsyncKeyState(VK_RETURN) & 0x8000)
	{
		bReturn = true;
	}

	else if (bReturn)
	{
		bReturn = false;
		m_pScene->ChangeCamera(str);

		if (str == "SubCamera1")
			str = "MainCamera";

		else
			str = "SubCamera1";
	}

	return 0;
}

int CMainScene::LateUpdate(float fTime)
{
	return 0;
}

void CMainScene::Render(float fTime)
{
}

CMainScene * CMainScene::Clone()
{
	return new CMainScene(*this);
}

int CMainScene::CreateMonster(float fTime)
{
	CDx11GameObject*	pMonster = CDx11GameObject::Create("MonsterPrototype", OT_CLONE);

	CDx11Transform*	pTransform = pMonster->GetTransform();

	pTransform->SetWorldPos((rand() % 1001) / 100.f - 5.f, (rand() % 1001) / 100.f - 5.f,
		(rand() % 501) / 100.f);

	SAFE_RELEASE(pTransform);

	CDx11Layer*	pLayer = m_pScene->FindLayer("DefaultLayer");

	if (!pLayer)
		return false;

	pLayer->AddObject(pMonster);
	SAFE_RELEASE(pMonster);

	SAFE_RELEASE(pLayer);


	return 0;
}
